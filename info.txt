the react app is created under client direcoty using the command
npx create-react-app client

the other projects (server, worker) are manually created and typed.

creating Dockerfile.dev in each project for dev 
 this will make it easier to update code and test without having to rebuild containers each time
 remember we need to map the volume

Also docker-compose.yml is created to bring the dependecies such as postgres and redis
  for dev purposes

docker-compose: services reference the container hostnames
nginx default.conf has internal definition of upstream servers that reference values defined in
   docker-compose

Remember: docker-compose up (to build and run)
connect on localhost:3050


in Dockerrun.aws.json: in nginx container definition we added links to indicate to Amazon ECS 
  that nginx connects/reroutes to client and server containers.

in production we rely on AWS external services (AWS RDS and AWS Elastic Cache) 
 instead of postgres and redis
 RDS instance created with user:  postgres, pas: postgrespassword, dbname: fibvalues
 security group is creatd then added to RDS, ElastiCache and ElasticBeanstalk

ElasticBeanstalk instance is created, then added the security group to allow connecting to RDS and redis
   Then added the environment variables 
      PGDATABASE : fibvalues
      PGHOST : "ElasticBeanstalk end point value" (multi-docker-postgres.cgszozeldyt7.us-west-1.rds.amazonaws.com)
      PGPASSWORD : postgrespassword
      PGPORT : 5432
      PGUSER : postgres
      REDIS_HOST : "RDS end point" (multi-docker-redis.ab61xt.0001.usw1.cache.amazonaws.com)
      REDIS_PORT : 6379

      Note this env param similar to values defined in docker-compose.yml  with updated values as
      defined in the prod env.